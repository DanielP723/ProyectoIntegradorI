CREATE DATABASE IF NOT EXISTS concesionario;
USE concesionario;

##Creación tabla usuarios
CREATE TABLE `usuarios` (
	`nombre_u` VARCHAR(64) NOT NULL COLLATE 'latin1_swedish_ci',
	`documento` BIGINT(20) NOT NULL,
	`direccion` VARCHAR(256) NOT NULL COLLATE 'latin1_swedish_ci',
	`telefono` BIGINT(20) NOT NULL,
	`correo` VARCHAR(64) NOT NULL COLLATE 'latin1_swedish_ci',
	`tipo` TINYINT(4) NOT NULL DEFAULT '0',
	`idUsuario` INT(11) NOT NULL AUTO_INCREMENT,
	`creacion` TIMESTAMP NOT NULL DEFAULT current_timestamp(),
	`modificacion` TIMESTAMP NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
	`activo` TINYINT(4) NULL DEFAULT '0',
	PRIMARY KEY (`idUsuario`) USING BTREE,
	UNIQUE INDEX `documento` (`documento`) USING BTREE
)
COLLATE='latin1_swedish_ci'
ENGINE=InnoDB
AUTO_INCREMENT=4
;

##Creación tabla productos
DROP TABLE IF EXISTS productos;
CREATE TABLE productos (
	nombre_p VARCHAR(64) NOT NULL COLLATE 'utf8mb3_general_ci',
	modelo VARCHAR(256) NOT NULL COLLATE 'utf8mb3_general_ci',
	marca VARCHAR(256) NOT NULL COLLATE 'utf8mb3_general_ci',
	stock INT(11) NOT NULL,
	precio INT(11) NOT NULL,
	idProductos INT(11) NOT NULL AUTO_INCREMENT,
	creacion TIMESTAMP NOT NULL DEFAULT current_timestamp(),
	modificacion TIMESTAMP NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
	activo TINYINT(4) NULL DEFAULT '0',
	PRIMARY KEY (idProductos) USING BTREE,
	UNIQUE INDEX nombre_p (nombre_p) USING BTREE
)
COLLATE='utf8mb3_general_ci'
ENGINE=InnoDB
AUTO_INCREMENT=3
;

##Creación tabla detalleFactura
DROP TABLE IF EXISTS detalleFactura;
CREATE TABLE detalleFactura(

precio INT NOT NULL,
cantidad INT NOT NULL,
productos_idProductos INT NOT NULL,
CONSTRAINT fk_productos FOREIGN KEY (productos_idProductos)
REFERENCES productos (idProductos),
idDetalle INT AUTO_INCREMENT PRIMARY KEY NOT NULL

);

##Creación tabla factura
DROP TABLE IF EXISTS factura;
CREATE TABLE factura(

usuario_idUsuario INT NOT NULL,
detalleFactura_idDetalle INT NOT NULL,
CONSTRAINT fk_usuario FOREIGN KEY (usuario_idUsuario)
REFERENCES usuarios (idUsuario),
CONSTRAINT fk_detalle FOREIGN KEY (detalleFactura_idDetalle)
REFERENCES detallefactura (idDetalle),
idFactura INT AUTO_INCREMENT PRIMARY KEY NOT NULL
);

##Creación tabla historico de precios
CREATE TABLE historico_precios (
	ID INT(11) NOT NULL AUTO_INCREMENT,
	nombre_p VARCHAR(64) NOT NULL COLLATE 'utf8mb3_general_ci',
	idProductos INT(50) NOT NULL,
	precio INT(50) NOT NULL,
	modificacion TIMESTAMP NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
	PRIMARY KEY (ID) USING BTREE
)
COLLATE='latin1_swedish_ci'
ENGINE=InnoDB
;

##Procedimiento signUp

CREATE PROCEDURE `signupUser`(
	IN `nomb` VARCHAR(64),
	IN `dni` BIGINT,
	IN `dir` VARCHAR(64),
	IN `tel` BIGINT,
	IN `email` VARCHAR(64)
)
LANGUAGE SQL
NOT DETERMINISTIC
CONTAINS SQL
SQL SECURITY DEFINER
COMMENT ''
BEGIN
	INSERT INTO usuarios (nombre_u,documento,direccion,telefono,correo) VALUES (nomb,dni,dir,tel,email);
END

##Procedimiento delete

CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteUser`(
	IN `dni` INT
)
LANGUAGE SQL
NOT DETERMINISTIC
CONTAINS SQL
SQL SECURITY DEFINER
COMMENT ''
BEGIN
UPDATE usuarios SET activo = 1 WHERE documento = dni;
END
;

#Vista Usuarios activos 

CREATE ALGORITHM = MERGE DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `usuarios_activos` AS SELECT * FROM usuarios 
WHERE activo = 0;

#Vista Usuarios Eliminados

CREATE ALGORITHM = MERGE SQL SECURITY DEFINER VIEW `usuarios_eliminados` 
AS SELECT * FROM usuarios 
WHERE activo > 0;

#Vista Productos Activos

CREATE ALGORITHM = MERGE SQL SECURITY DEFINER VIEW `productos_activos` 
AS SELECT * FROM productos 
WHERE activo = 0;

#Vista Productos Eliminados

CREATE ALGORITHM = MERGE SQL SECURITY DEFINER VIEW `productos_eliminados` 
AS SELECT * FROM productos 
WHERE activo > 0;

#Procedimiento delete productos

CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteProducts`(
	IN `id` INT
)
LANGUAGE SQL
NOT DETERMINISTIC
CONTAINS SQL
SQL SECURITY DEFINER
COMMENT ''
BEGIN
UPDATE productos SET activo = 1 WHERE idProductos = id;
END;


## Trigger para guardar cambios
CREATE TRIGGER historico_precio
BEFORE UPDATE ON productos 
FOR EACH ROW 
INSERT INTO historico_precios(nombre_p, idProductos, precio) VALUES (OLD.nombre_p, OLD.idProductos, NEW.precio);

## Trigger para guardar nuevo producto en cambios
CREATE TRIGGER nuevo_producto
AFTER INSERT ON productos 
FOR EACH ROW 
INSERT INTO historico_precios(nombre_p, idProductos, precio) VALUES (NEW.nombre_p, NEW.idProductos, NEW.precio);
